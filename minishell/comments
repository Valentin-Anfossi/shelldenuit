
// Looks OK ! mais a tester !
// TO DO :
// pour reduire a 25 lines : tout mettre dans une struct et changer les values avec -> dans les create tokens func
// chiant a faire mais ca devrait passer

//25 lignes tout pile 

// if strchr("/")
//	type = command;
//abou jdskdjskj "000"asda"sada asd
//0000100000000012333200002222210000
//LINE I
//dede "de"e" dwde

// int in_single;
// int in_double;

//dede "de"e" dwde
//  0000 1112   0100000 0

//abou jdskdjskj "000"asda"sada asd
// if croise une quote(weshlaquote)
// strchr("ouellestlaquote")
//si oui (bien)
//on continue jusqua cote et on tokenize
//si non (bou)
//on tokenize au prochain espace


// minishell :cd "bonjour

// t_token **create_lst_tokens(char *line)
// {
// 	int start = 0;
// 	int end = 0;
// 	t_token **tokens;

// 	tokens = (t_token **)malloc(sizeof(t_token *));
// 	*tokens = NULL;
// 	while(end <= (int)ft_strlen(line)) //"asd" "asd"
// 	{
// 		if(line[end] == ' ' || end == (int)ft_strlen(line))
// 		{
// 			create_token(line,start,end,tokens);
// 			create_space_token(tokens);
// 			start = end;
// 			start ++;
// 		}
// 		if(line[end] == '"')
// 			if (ft_strchr(&line[end],'"'))
//             {
//     			end += create_quoted_token(&line[end], tokens);
//                 start = end;
//                 continue ; 
//             }
// 		end ++;
// 	}
//     	// create_token(line, start, end, tokens);
// 	return (tokens);
// }
// BONJOUR JF
//CES INSTRUCTIONS SAUTODETRUIRON DANS 69 SECONDES
// EN VRAI JE CROIS CA MARCHE
// CA FAIT AUSSI LES TYPES

//en gros : ca fait les tokens avec create_lst_tokens2
//si c'est du texte ca l'envoie dans split token
//		ca split les >> < << etc et ca fait des tokens
//sinon si c'est entre quotes ca en fait un token

// si tu veux test fais toi plaiz, vaut mieux trouver les bug maintenant
// en gros on est de retour a ce qu'on avait avant (avec les quotes)
// maintenant faut faire le parser
// https://www.geeksforgeeks.org/recursive-descent-parser/
// il est 3h du mat donc bonne nuit

// SALUT VAL
// CE MESSAGE S'AUTODETRUIRA PAS PARCE QUE JE SAIS PAS CODER CA
// J'ai pas trouver d'erreur dans le tokeniser GG ! (j.ai juste ajouter un check pour le pipe)
// du coup en ce qui concerne le parsing, je fais peut etre fausse route
// mais la seule chose qui m'est venu en tete c'est de :
// commencer a preparer les jobs en creeant une struct t_job
// commencer a checker les erreurs de commande
// QUESTION : quand on tokenise les redir heredoc et append, ce serait pas mieux de ne pas les differencier 
//			dans le tokeniser mais plutot apres la creation du JOB, au moment ou on "execute" la redir/heredoc ??? 
//
//petite info pour le pipe : si il est entre quote, il joue pas le role de pipe 
// jelucian@c1r2p8:~/Core$ echo salut "|" cat yo.txt 
// salut | cat yo.txt

// t_job	*create_job_save(t_token **tokens, t_job **jobs)
// {
// 	t_job	*new_job;
//     t_token *t;
// 	int		i;
	
//     t = *tokens;
// 	i = 0;
// 	new_job = malloc_job();
// 	while (t->type == SPC && t->next)
// 		t = t->next;
//     new_job->cmd = ft_strdup(ft_strtrim(t->content, "\"\'"));
// 	if (!check_for_commands(t->content))
// 	new_job->error = 1;
// 	while(t->content)
// 	{
// 		if (!t->next)
// 		break;
// 		t = t->next;
// 		if (t->type == ARG && ms_strcmp(t->content, "|") == 0)
// 		break ;
// 		else if (t->type == ARG || t->type == QUO_D || t->type == QUO_S)
// 		{
// 			new_job->args[i] = ft_strdup(t->content);
// 			i++;
// 		}
// 		else if (t->type != SPC)
// 		new_job->redir->type = t->type;
// 	}
// 	if (ms_strcmp(t->content, "|") == 0)
// 	{
// 		t = t->next;
// 		new_job->piped_job = create_job(&t, jobs);
// 	}
// 	new_job->args[i] = NULL;
// 	return (new_job);
// }

// t_job	*create_lst_job(t_token **tokens)
// {
// 	t_job *jobs;

// 	jobs = create_job(tokens);
// 	return (jobs);
// }

// s = $USER
// s = $USER$USER
// s = "hey salut $USER lol lol lol $USER"

// char *expand_token_env(char *s, t_shell *shell)
// {
// 	int i;
// 	int j;
// 	char *out;
// 	char *before;

// 	i = 0;
// 	j = 0;
// 	s = ft_strtrim(s,"\"");
// 	while(s[i])
// 	{
		
// 		if(s[i] == '$')
// 		{
// 			before = ft_substr(s,j,i-j);
// 			j = i + 1;
// 			while(s[j] != ' ' && s[j] != '$' && s[j])
// 				j ++;
// 			char *substr = ft_substr(s, i + 1,j-1-i);
// 			char *s1 = getenv(substr);
// 			out = ft_strjoin(before,s1);
// 			i = j-1;
// 		}
// 		i++;
// 	}
// 	if(base[0] == 0)
// 		return (s);
// 	return (base);
// }

// char *expand_token_env(char *s, t_shell *shell)
// {
// 	int i;
// 	int j;
// 	int	k;
// 	char *out;

// 	i = 0;
// 	j = 0;
// 	k = 0;
// 	s = ft_strtrim(s,"\"");
// 	while(s[i])
// 	{
// 		if(s[i] == '$')
// 		{
// 			j = i + 1;
// 			while(s[j] != ' ' && s[j] != '$' && s[j])
// 				j ++;
// 			char *substr = ft_substr(s, i + 1,j-1-i);
// 			char *s1 = getenv(substr);
// 			out = ft_strjoin(out, s1);
// 			i = j-1;
// 			k = ft_strlen(out);
// 		}
// 		else
// 		{
// 			out[k] = s[i];
// 			k++;
// 		}
// 		i++;
// 	}
// 	return (out);
// }

//They took er jebs!
// Est ce quil faut rien faire avec le parent thread ? (a part wait l'exit du child)
// Je sais pas trop
// Aussi les redirections out (out et out_append) on peut les faire sans pipe
// dup2 ca fonctionne tres bien (woopi) exemple au dessus

// le nom de la var d'env doit etre ALPHANUM OU UNDERSCORE OK
// le contenu = n'importe quoi OK
// faut check si y'a un espace
// modifier si elle existe deja
//	MAJ ou min, underscore

//pour test il faut mettre une commande valide genre "cd bou"
//ca fait pas la commande, juste ca print et fait un ls avec le new process
//c normal c pour tester
//tkt

//Execve a besoin du path COMPLET (/home/vanfossi/blablabla)
//l'arg Env de execve determine si il recoit les variable d'enviro
//env = null par ex, il a acces a rien
//pour l'env actuel de l'os c'est 

//mais jpense faut faire le notre avec nos variables non ? (c pas precise mais ca ferait sens)

void	test_redir(t_job *job)
{
	int		fd;
	char	**argv;
	char	**env;

	// Pour les rights faut mettre le code CHMOD a la fin
	fd = open("output",O_WRONLY | O_CREAT ,0755);
	argv = NULL;
	env = NULL;
	//on redirige STDOUT dans le fd
	dup2(fd, STDOUT_FILENO);
	fd = open("infile",O_RDONLY);
	// isatty (entrÃ©e utilisateur ou d,un pipe/fichier/script.), ttyname, ttyslot, ioctl,
	//on le ferme paske plus besoin
	close(fd);
	ft_printf("hello ?\n");
	execve("ls",argv,env);
	exit(EXIT_FAILURE);
	//Ca redirect bien "hello ?" et le ls dans le fichier output !! :o magie ! ðŸª„
}

    if (out_fd != -1) 
	{
        if (dup2(out_fd, STDOUT_FILENO) == -1) {
            perror("dup2");
            close(out_fd);
            if (in_fd != -1) 
				close(in_fd);
            return (-1);
        }
        close(out_fd); // Fermer le descripteur original aprÃ¨s dup2
    }
    if (in_fd != -1) {
        if (dup2(in_fd, STDIN_FILENO) == -1) {
            perror("dup2");
            if (out_fd != -1) 
				close(out_fd);
            close(in_fd);
            return (-1);
        }
        close(in_fd); // Fermer le descripteur original aprÃ¨s dup2
    }